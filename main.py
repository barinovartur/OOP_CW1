from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler
from PIL import Image
import os
import tempfile
import logging
from ImageManager import ImageManager
from MessageHandler import MessageHandlerClass
from ButtonHandler import ButtonHandler
from CommandHandlerClass import CommandHandlerClass


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

class SettingsManager:
    def __init__(self):
        self.crop_to_9_16 = False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—Ä–µ–∑–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞

    def set_crop_to_9_16(self, value):
        self.crop_to_9_16 = value

    def should_crop_to_9_16(self):
        return self.crop_to_9_16


class AutoCreoBot:
    def __init__(self, token: str):
        self.application = Application.builder().token(token).build()
        self.settings = SettingsManager()
        self.image_manager = ImageManager(self.settings)

        self.expected_type = None
        self.generated_sets_count = 0
        self.message_handler = MessageHandlerClass(self)
        self.button_handler = ButtonHandler(self)
        self.command_handler = CommandHandlerClass(self)
        self.setup_handlers()

    def setup_handlers(self):
        self.application.add_handler(CommandHandler("start", self.command_handler.start))
        self.application.add_handler(CallbackQueryHandler(self.button_handler.button_handler))
        self.application.add_handler(MessageHandler(filters.Document.MimeType("application/zip"), self.message_handler.handle_zip))
        self.application.add_handler(MessageHandler(filters.PHOTO, self.message_handler.handle_photo))
        self.application.add_handler(MessageHandler(filters.Document.MimeType("image/png"), self.message_handler.handle_png_document))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.message_handler.handle_sets_count))

    def create_main_menu_button(self):
        keyboard = [
            [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
            [InlineKeyboardButton("–û–±—Ä–µ–∑–∞—Ç—å –¥–æ 9:16", callback_data="toggle_crop_setting")]  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ
        ]
        return InlineKeyboardMarkup(keyboard)

    async def start_command(self, update: Update, context: CallbackContext):
        await self.command_handler.start(update, context)

    async def process_background_zip(self, temp_dir: str, update: Update):
        found_backgrounds = False
        for filename in os.listdir(temp_dir):
            file_path = os.path.join(temp_dir, filename)
            if filename.lower().endswith(('png', 'jpg', 'jpeg')):
                try:
                    self.image_manager.add_background(Image.open(file_path))
                    found_backgrounds = True
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")

        if found_backgrounds:
            reply_markup = self.create_main_menu_button()
            await update.message.reply_text(f"–§–æ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã, –≤—Å–µ–≥–æ —Ñ–æ–Ω–æ–≤: {len(self.image_manager.background_images)}.",
                                            reply_markup=reply_markup)
        else:
            reply_markup = self.create_main_menu_button()
            await update.message.reply_text("–ù–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —Ñ–æ–Ω–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ.", reply_markup=reply_markup)

    async def process_overlay_zip(self, temp_dir: str, update: Update):
        found_overlay = False
        for filename in os.listdir(temp_dir):
            if filename.lower().endswith('.png'):
                try:
                    file_path = os.path.join(temp_dir, filename)
                    self.image_manager.add_overlay(Image.open(file_path))
                    found_overlay = True
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {filename}: {e}")
        if found_overlay:
            reply_markup = self.create_main_menu_button()
            await update.message.reply_text(f"–®–∞–±–ª–æ–Ω—ã (PNG) –ø–æ–ª—É—á–µ–Ω—ã: {len(self.image_manager.overlay_images)}.",
                                            reply_markup=reply_markup)
        else:
            reply_markup = self.create_main_menu_button()
            await update.message.reply_text("–í –∞—Ä—Ö–∏–≤–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.", reply_markup=reply_markup)

    async def generate_images(self, message):
        sets_to_generate = self.generated_sets_count if self.generated_sets_count > 0 else len(
            self.image_manager.background_images)
        self.image_manager.generate_images(sets_to_generate)

        keyboard = [
            [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ ZIP —Ñ–∞–π–ª", callback_data="send_as_zip")],
            [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ –æ—á–µ—Ä–µ–¥–∏", callback_data="send_individually")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await message.reply_text("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏:",
                                 reply_markup=reply_markup)

    async def send_images_as_zip(self, message):
        with tempfile.NamedTemporaryFile(delete=False, suffix=".zip") as temp_zip:
            self.image_manager.save_images_as_zip(temp_zip.name)
            await message.reply_document(document=open(temp_zip.name, 'rb'), filename="result_images.zip")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [[InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await message.reply_text("–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! üéâ", reply_markup=reply_markup)

    async def send_images_individually(self, message):
        temp_files = self.image_manager.save_images_individually()
        for file_path in temp_files:
            await message.reply_document(document=open(file_path, 'rb'), filename=os.path.basename(file_path))
            os.remove(file_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [[InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await message.reply_text("–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! üéâ", reply_markup=reply_markup)

    def run(self):
        self.application.run_polling()





if __name__ == "__main__":
    with open('api_token.txt', 'r') as file:
        api_token = file.read().strip()
    bot = AutoCreoBot(api_token)
    bot.run()